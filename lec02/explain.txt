hash_table.py

calculate_hash ではハッシュ関数を書いている。
ハッシュ値が特定の範囲を超えないようにするためにmodulusで割ったあまりで位置を決める。2**32はハッシュテーブルのサイズ。
ord(char)を足すことで異なる文字列が異なるハッシュ値を持つ可能性を高くさせた。

delete ではハッシュテーブルから指定されたキーに対応するアイテムを削除する。
ハッシュ値を計算し、バケットサイズで割った余りを求めどのバケットに所属しているかを判断。
一致するキーが見つかったらprev.nextを次のアイテムに設定することで現在のアイテムを消した。

Cache.py

class linked_listで連結リストを作成した。
ハッシュテーブルとリンクリストの両方を使用して、キャッシュをする。
ハッシュテーブルを見てkeyが存在するかを調べる。
存在していれば対応するノードのvalueを上書きし，連結リストの先頭に持ってくる．
存在していなければ新たにノードを作成し連結リストの先頭におく．